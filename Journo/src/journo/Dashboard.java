/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package journo;

/**
 *
 * @author shima
 */
import javax.swing.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

public class Dashboard extends javax.swing.JFrame {
    private UserAuth userAuth;
    private DefaultListModel<String> journalListModel;
    private ArrayList<Integer> journalIds;
    /**
     * Creates new form Dashboard
     */
    public Dashboard(UserAuth userAuth) {
        this.userAuth = userAuth;
        initComponents();
        initCustomComponents();
        loadJournals(false); 
        
 
}

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    private void initCustomComponents() {
        journalListModel = new DefaultListModel<>();
        lstJournals.setModel(journalListModel);
        lstJournals.addListSelectionListener(evt -> lstJournalsValueChanged(evt));
        btnSubmit.addActionListener(evt -> saveJournalEntry());
        
        txtSearch.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
            @Override
            public void insertUpdate(javax.swing.event.DocumentEvent e) {
                filterJournals();
            }

            @Override
            public void removeUpdate(javax.swing.event.DocumentEvent e) {
                filterJournals();
            }

            @Override
            public void changedUpdate(javax.swing.event.DocumentEvent e) {
                filterJournals();
            }
        });

    }
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        paneMenu = new javax.swing.JTabbedPane();
        mnuViewEntry = new javax.swing.JPanel();
        tblList = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtJournalEntry = new javax.swing.JTextArea();
        txtJournalTitle = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        lblAuthor = new javax.swing.JLabel();
        lblTimestamp = new javax.swing.JLabel();
        lblJournalId = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        lstJournals = new javax.swing.JList<>();
        jPanel1 = new javax.swing.JPanel();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        chkShowOnlyPersonalEntries = new javax.swing.JCheckBox();
        btnCancel = new javax.swing.JButton();
        txtSearch = new javax.swing.JTextField();
        lblSearch = new javax.swing.JLabel();
        mnuWriteEntry = new javax.swing.JPanel();
        txtTitle = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtContent = new javax.swing.JTextArea();
        btnSubmit = new javax.swing.JButton();
        chkVisibility = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblUser = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuLogout = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        paneMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                paneMenuMouseClicked(evt);
            }
        });
        paneMenu.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                paneMenuComponentShown(evt);
            }
        });

        tblList.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        txtJournalEntry.setColumns(20);
        txtJournalEntry.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtJournalEntry.setLineWrap(true);
        txtJournalEntry.setRows(5);
        jScrollPane3.setViewportView(txtJournalEntry);

        txtJournalTitle.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Journal Entry:");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Journal Title:");

        lblAuthor.setText("Author:");

        lblTimestamp.setText("Timestamp:");

        lblJournalId.setText("ID:");

        javax.swing.GroupLayout tblListLayout = new javax.swing.GroupLayout(tblList);
        tblList.setLayout(tblListLayout);
        tblListLayout.setHorizontalGroup(
            tblListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tblListLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(tblListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane3)
                    .addComponent(txtJournalTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 765, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(lblJournalId, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(tblListLayout.createSequentialGroup()
                        .addComponent(lblAuthor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTimestamp, javax.swing.GroupLayout.PREFERRED_SIZE, 217, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        tblListLayout.setVerticalGroup(
            tblListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tblListLayout.createSequentialGroup()
                .addGroup(tblListLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAuthor)
                    .addComponent(lblTimestamp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblJournalId)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(1, 1, 1)
                .addComponent(txtJournalTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3)
                .addGap(22, 22, 22))
        );

        lstJournals.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(lstJournals);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        btnEdit.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnEdit.setText("EDIT");
        btnEdit.setEnabled(false);
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnDelete.setText("DELETE");
        btnDelete.setEnabled(false);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSave.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnSave.setText("SAVE");
        btnSave.setEnabled(false);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        chkShowOnlyPersonalEntries.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        chkShowOnlyPersonalEntries.setText("Show Only Personal Entries");
        chkShowOnlyPersonalEntries.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkShowOnlyPersonalEntriesActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btnCancel.setText("CANCEL");
        btnCancel.setEnabled(false);
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(chkShowOnlyPersonalEntries, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(126, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(28, 28, 28))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(chkShowOnlyPersonalEntries)
                .addContainerGap())
        );

        lblSearch.setText("Search by title");

        javax.swing.GroupLayout mnuViewEntryLayout = new javax.swing.GroupLayout(mnuViewEntry);
        mnuViewEntry.setLayout(mnuViewEntryLayout);
        mnuViewEntryLayout.setHorizontalGroup(
            mnuViewEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mnuViewEntryLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tblList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mnuViewEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mnuViewEntryLayout.createSequentialGroup()
                        .addGroup(mnuViewEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtSearch))
                        .addGap(18, 18, 18))
                    .addGroup(mnuViewEntryLayout.createSequentialGroup()
                        .addComponent(lblSearch)
                        .addContainerGap(281, Short.MAX_VALUE))))
        );
        mnuViewEntryLayout.setVerticalGroup(
            mnuViewEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mnuViewEntryLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mnuViewEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mnuViewEntryLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                        .addComponent(lblSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tblList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        paneMenu.addTab("View Entry", mnuViewEntry);

        mnuWriteEntry.setMaximumSize(new java.awt.Dimension(32767, 300));

        txtTitle.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtTitle.setToolTipText("Title here...");
        txtTitle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTitleActionPerformed(evt);
            }
        });

        txtContent.setColumns(20);
        txtContent.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txtContent.setLineWrap(true);
        txtContent.setRows(5);
        txtContent.setToolTipText("Journal entry goes here...");
        jScrollPane1.setViewportView(txtContent);

        btnSubmit.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        btnSubmit.setText("SUBMIT");
        btnSubmit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnSubmitMouseClicked(evt);
            }
        });

        chkVisibility.setText("Make this entry public");

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Journal Title:");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Journal Entry:");

        javax.swing.GroupLayout mnuWriteEntryLayout = new javax.swing.GroupLayout(mnuWriteEntry);
        mnuWriteEntry.setLayout(mnuWriteEntryLayout);
        mnuWriteEntryLayout.setHorizontalGroup(
            mnuWriteEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mnuWriteEntryLayout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addGroup(mnuWriteEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(mnuWriteEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel2)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(mnuWriteEntryLayout.createSequentialGroup()
                            .addComponent(chkVisibility, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(683, 683, 683)
                            .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 1016, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(94, Short.MAX_VALUE))
        );
        mnuWriteEntryLayout.setVerticalGroup(
            mnuWriteEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mnuWriteEntryLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mnuWriteEntryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkVisibility)
                    .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(60, Short.MAX_VALUE))
        );

        paneMenu.addTab("Write Entry", mnuWriteEntry);

        lblUser.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblUser.setText("Hello, User");

        mnuLogout.setText("Logout");
        mnuLogout.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mnuLogoutMouseClicked(evt);
            }
        });
        jMenuBar1.add(mnuLogout);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(paneMenu)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblUser, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(12, Short.MAX_VALUE)
                .addComponent(lblUser)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paneMenu, javax.swing.GroupLayout.PREFERRED_SIZE, 547, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtTitleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTitleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTitleActionPerformed

    private void mnuLogoutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mnuLogoutMouseClicked
        // TODO add your handling code here:
        // Perform logout
        int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to logout?", "Confirm Logout", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        
        if(confirm == JOptionPane.YES_OPTION) {
            userAuth.logout();
            new LoginForm().setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_mnuLogoutMouseClicked

    private void btnSubmitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnSubmitMouseClicked
        // TODO add your handling code here:
        saveJournalEntry();
    }//GEN-LAST:event_btnSubmitMouseClicked

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        txtJournalTitle.setEditable(true);
        txtJournalEntry.setEditable(true);
        btnSave.setEnabled(true);
        btnCancel.setEnabled(true);
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        int selectedIndex = lstJournals.getSelectedIndex();
        if (selectedIndex != -1) {
            int journalId = journalIds.get(selectedIndex);
            String query = "UPDATE Journals SET title = ?, content = ? WHERE journal_id = ?";
            try (Connection conn = DatabaseConnection.getConnection();
                 PreparedStatement stmt = conn.prepareStatement(query)) {

                stmt.setString(1, txtJournalTitle.getText());
                stmt.setString(2, txtJournalEntry.getText());
                stmt.setInt(3, journalId);
                stmt.executeUpdate();
                loadJournals(chkShowOnlyPersonalEntries.isSelected()); // Refresh the list
                JOptionPane.showMessageDialog(this, "Journal entry saved successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                loadJournals(chkShowOnlyPersonalEntries.isSelected()); // Refresh the list
                txtJournalTitle.setText("");
                txtJournalEntry.setText("");
                btnEdit.setEnabled(false);
                btnDelete.setEnabled(false);
                btnSave.setEnabled(false);
                btnCancel.setEnabled(false);
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "An error occurred while saving the journal entry.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int selectedIndex = lstJournals.getSelectedIndex();
        
    if (selectedIndex != -1) {
        int confirmation = JOptionPane.showConfirmDialog(null, 
            "Are you sure you want to delete this journal entry?", 
            "Confirm Deletion", 
            JOptionPane.YES_NO_OPTION);

    if (confirmation == JOptionPane.YES_OPTION) {
        int journalId = journalIds.get(selectedIndex);
        String query = "DELETE FROM Journals WHERE journal_id = ?";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {

            stmt.setInt(1, journalId);
            stmt.executeUpdate();
            loadJournals(chkShowOnlyPersonalEntries.isSelected()); // Refresh the list
            txtJournalTitle.setText("");
            txtJournalEntry.setText("");
            btnEdit.setEnabled(false);
            btnDelete.setEnabled(false);
            btnSave.setEnabled(false);
            btnCancel.setEnabled(false);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}

    }//GEN-LAST:event_btnDeleteActionPerformed

    private void chkShowOnlyPersonalEntriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkShowOnlyPersonalEntriesActionPerformed
        loadJournals(chkShowOnlyPersonalEntries.isSelected());
    }//GEN-LAST:event_chkShowOnlyPersonalEntriesActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
            int selectedIndex = lstJournals.getSelectedIndex();
        if (selectedIndex != -1) {
            loadJournals(chkShowOnlyPersonalEntries.isSelected()); // Refresh the list
            txtJournalTitle.setText("");
            txtJournalEntry.setText("");
            btnEdit.setEnabled(false);
            btnDelete.setEnabled(false);
            btnSave.setEnabled(false);
            btnCancel.setEnabled(false);
        }
    }//GEN-LAST:event_btnCancelActionPerformed

    private void paneMenuComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_paneMenuComponentShown
        // TODO add your handling code here:
        // loadJournals(chkShowOnlyPersonalEntries.isSelected());
    }//GEN-LAST:event_paneMenuComponentShown

    private void paneMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_paneMenuMouseClicked
        // TODO add your handling code here:
        loadJournals(chkShowOnlyPersonalEntries.isSelected());
    }//GEN-LAST:event_paneMenuMouseClicked

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        // TODO add your handling code here:
        lblUser.setText("Hello, " + userAuth.getCurrentUsername());
    }//GEN-LAST:event_formWindowActivated

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Dashboard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        // Create and display the form
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                UserAuth userAuth = new UserAuth(); // Create an instance of UserAuth
                new Dashboard(userAuth).setVisible(true); // Pass the instance to Dashboard
            }
        });
    }
    
    private void saveJournalEntry() {
        String title = txtTitle.getText().trim();
        String content = txtContent.getText().trim();
        boolean isPublic = chkVisibility.isSelected();

        if (title.isEmpty() || content.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Title and content cannot be empty.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String query = "INSERT INTO Journals (user_id, title, content, is_public) VALUES (?, ?, ?, ?)";
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {
            
            stmt.setInt(1, userAuth.getCurrentUserId());
            stmt.setString(2, title);
            stmt.setString(3, content);
            stmt.setBoolean(4, isPublic);

            int rowsInserted = stmt.executeUpdate();
            if (rowsInserted > 0) {
                JOptionPane.showMessageDialog(this, "Journal entry saved successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                txtTitle.setText("");
                txtContent.setText("");
                chkVisibility.setSelected(false);
            } else {
                JOptionPane.showMessageDialog(this, "Failed to save journal entry.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "An error occurred while saving the journal entry.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
        private void loadJournals(boolean showOnlyPersonal) {
    journalListModel.clear();
    journalIds = new ArrayList<>();
    String query;
    if (showOnlyPersonal) {
        query = "SELECT j.journal_id, j.title, j.content, u.username, j.date_created FROM journals j JOIN users u ON j.user_id = u.user_id WHERE j.user_id = ?"; // Show only personal entries
    } else {
        query =  "SELECT j.journal_id, j.title, j.content, u.username, j.date_created FROM journals j JOIN users u ON j.user_id = u.user_id WHERE j.is_public = 1"; // Show only public entries
    }

    try (Connection conn = DatabaseConnection.getConnection();
         PreparedStatement stmt = conn.prepareStatement(query)) {

        if (showOnlyPersonal) {
            stmt.setInt(1, userAuth.currentUserId); // Filter by the user's ID if showing personal entries
        }

        ResultSet rs = stmt.executeQuery();
        while (rs.next()) {
            int journalId = rs.getInt("journal_id");
            String title = rs.getString("title");
            journalListModel.addElement(title);
            journalIds.add(journalId);
        }

    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "An error occurred while loading journals.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}
        private void loadJournalEntry(int journalId) {
        String query = "SELECT j.title, j.user_id, j.journal_id, j.content, u.username, j.date_created FROM Journals j JOIN Users u ON j.user_id = u.user_id WHERE j.journal_id = ?"; 
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement stmt = conn.prepareStatement(query)) {

            stmt.setInt(1, journalId);
            ResultSet rs = stmt.executeQuery();

            if (rs.next()) {
                txtJournalTitle.setText(rs.getString("title"));
                txtJournalEntry.setText(rs.getString("content"));
                lblAuthor.setText("Author: " + rs.getString("username"));
                lblTimestamp.setText("Timestamp: " + rs.getTimestamp("date_created").toString());
                lblJournalId.setText("ID: " +rs.getString("journal_id"));

                boolean isCurrentUserEntry = rs.getInt("user_id") == userAuth.getCurrentUserId();
                btnEdit.setEnabled(isCurrentUserEntry);
                btnDelete.setEnabled(isCurrentUserEntry);
                btnSave.setEnabled(false); // Disable Save until Edit is clicked
                btnCancel.setEnabled(false);
                txtJournalTitle.setEditable(false);
                txtJournalEntry.setEditable(false);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    
    private void lstJournalsValueChanged(javax.swing.event.ListSelectionEvent evt) {
        if (!evt.getValueIsAdjusting()) {
            int selectedIndex = lstJournals.getSelectedIndex();
            if (selectedIndex != -1) {
                loadJournalEntry(journalIds.get(selectedIndex));
            }
        }
    }

    private void filterJournals() {
    String searchText = txtSearch.getText().toLowerCase();
    journalListModel.clear();

    String query = "SELECT title FROM Journals WHERE LOWER(title) LIKE ?";

    // Adjust query to filter based on public/private and user's journals
    if (chkShowOnlyPersonalEntries.isSelected()) {
        query = "SELECT title FROM Journals WHERE user_id = ? AND LOWER(title) LIKE ?";
    } else {
        query = "SELECT title FROM Journals WHERE (user_id = ? OR is_public = '1') AND LOWER(title) LIKE ?";
    }

    try (Connection conn = DatabaseConnection.getConnection();
         PreparedStatement stmt = conn.prepareStatement(query)) {
        if (chkShowOnlyPersonalEntries.isSelected()) {
            stmt.setInt(1, userAuth.getCurrentUserId()); // Assuming you have a method to get the current user's ID
            stmt.setString(2, "%" + searchText + "%");
        } else {
            stmt.setInt(1, userAuth.getCurrentUserId()); // User ID for filtering
            stmt.setString(2, "%" + searchText + "%");
        }

        try (ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                String title = rs.getString("title");
                journalListModel.addElement(title);
            }
        }
    } catch (SQLException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "An error occurred while searching for journals.", "Error", JOptionPane.ERROR_MESSAGE);
    }
}

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JCheckBox chkShowOnlyPersonalEntries;
    private javax.swing.JCheckBox chkVisibility;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel lblAuthor;
    private javax.swing.JLabel lblJournalId;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JLabel lblTimestamp;
    private javax.swing.JLabel lblUser;
    private javax.swing.JList<String> lstJournals;
    private javax.swing.JMenu mnuLogout;
    private javax.swing.JPanel mnuViewEntry;
    private javax.swing.JPanel mnuWriteEntry;
    private javax.swing.JTabbedPane paneMenu;
    private javax.swing.JPanel tblList;
    private javax.swing.JTextArea txtContent;
    private javax.swing.JTextArea txtJournalEntry;
    private javax.swing.JTextField txtJournalTitle;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtTitle;
    // End of variables declaration//GEN-END:variables
}
